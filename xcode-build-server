#!/usr/bin/env python3

import logging
import os
import sys

level = os.environ.get("SOURCEKIT_LOGGING")
if ((level is not None and int(level) >= 1) or os.environ.get("XBSDEBUG") == "1"):
    logging.getLogger().setLevel(logging.DEBUG)
    logging.debug(f"# xcode builde server with python {sys.version}]")

# logging.getLogger().setLevel(logging.DEBUG)
def main():
    if len(sys.argv) > 1:
        if "-h" == sys.argv[1] or "--help" == sys.argv[1]:
            print(
                f"""usage:
                  {sys.argv[0]}: start a build server
                  {sys.argv[0]} config: dump buildServer.json to current dir
                  {sys.argv[0]} parse: xcode log subcommand. call parse -h to see more help
                  {sys.argv[0]} postaction: dump a xcode post build bash script to sync flags to .compile(usage: `{sys.argv[0]} postaction | bash &` in xcode post build bash script)
                  {sys.argv[0]} [-h|--help]: show help
                  """
            )
            exit(0)
        if sys.argv[1] == "config":
            from config import dump_server_config
            dump_server_config()
        elif sys.argv[1] == "parse":
            import xclog_parser

            argv = sys.argv.copy()
            argv[0] = f"{argv[0]} {argv[1]}"
            del argv[1]
            xclog_parser.main(argv)
        elif sys.argv[1]  == "postaction":
            sys.stdout.write(fr'''
            bash "{os.path.abspath(os.path.join(os.path.realpath(__file__), "..", "post_action.bash"))}"
            ''')
    else:
        # else serve as build server, and wait json reqest
        import server

        server.serve()


if __name__ == "__main__":
    # sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
    main()
